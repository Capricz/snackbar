<?xml version="1.0" encoding="UTF-8"?>
<!-- <web-app id="WebApp_ID" version="3.0"
	xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_0.xsd"> -->
<web-app version="3.0"
    xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">
    
<!-- <web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
				xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"> -->
	<!-- Bootstrap the root application context as usual using ContextLoaderListener -->
	<listener>
		<listener-class>
			org.springframework.web.context.ContextLoaderListener
		</listener-class>
	</listener>
	
	<!-- Configure ContextLoaderListener to use AnnotationConfigWebApplicationContext
	instead of the default XmlWebApplicationContext -->
	<context-param>
		<param-name>contextClass</param-name>
		<param-value>
				org.springframework.web.context.support.AnnotationConfigWebApplicationContext
		</param-value>
	</context-param>

	<!-- Configuration locations must consist of one or more comma- or space-delimited
	fully-qualified @Configuration classes. Fully-qualified packages may also be
	specified for component-scanning -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>com.zliang.snackbar.config.AppConfig</param-value>
	</context-param>

	<!-- Declare a Spring MVC DispatcherServlet as usual -->
	<!-- <servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class> -->
		<!-- Configure DispatcherServlet to use AnnotationConfigWebApplicationContext 
			instead of the default XmlWebApplicationContext -->
		<!-- <init-param>
			<param-name>contextClass</param-name>
			<param-value>
			org.springframework.web.context.support.AnnotationConfigWebApplicationContext
			</param-value>
		</init-param> -->
		<!-- Again, config locations must consist of one or more comma- or space-delimited 
			and fully-qualified @Configuration classes -->
		<!-- <init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>com.zliang.snackbar.config.MvcConfig</param-value>
		</init-param> -->
<!-- 	</servlet> -->

	<!-- <listener> <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class> 
		</listener> <context-param> <param-name>contextConfigLocation</param-name> 
		<param-value>classpath:applicationContext.xml</param-value> </context-param> -->

	<servlet>
		<servlet-name>HelloSnackbar</servlet-name>
		<servlet-class>com.zliang.snackbar.web.SnackbarServlet</servlet-class>
	</servlet>
	<servlet>
        <servlet-name>com.zliang.snackbar.config.MyApplication</servlet-name>
        <!-- <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
        <init-param>
            <param-name>jersey.config.server.provider.packages</param-name>
			<param-value>com.zliang.snackbar.web.rest</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup> -->
    </servlet>
    <servlet-mapping>
        <servlet-name>com.zliang.snackbar.config.MyApplication</servlet-name>
        <url-pattern>/jaxrs/*</url-pattern>
    </servlet-mapping>
    
	<servlet-mapping>
		<servlet-name>HelloSnackbar</servlet-name>
		<url-pattern>/helloServlet</url-pattern>
	</servlet-mapping>
	<!-- map all requests for /app/* to the dispatcher servlet -->
	<!-- <servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>/app/*</url-pattern>
	</servlet-mapping> -->
	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
</web-app>